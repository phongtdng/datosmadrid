% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_api.R
\name{fetch_api}
\alias{fetch_api}
\title{Fetch data from a Madrid Open Data API endpoint (minimal)}
\usage{
fetch_api(path, path_params = NULL, query = NULL, parse = TRUE)
}
\arguments{
\item{path}{Character scalar. Endpoint path beginning with \code{"/"} relative to
\code{https://datos.madrid.es/egob}, e.g. \code{"/catalogo/tipo/evento/{id}.json"}.}

\item{path_params}{Optional named list used to fill \code{\{placeholders\}} in \code{path},
e.g. \code{list(id = 203)} replaces \code{\{id\}}. Values are URL-encoded.}

\item{query}{Optional named list of query parameters to append to the request,
e.g. \code{list(q = "museo", limite = 50)}.}

\item{parse}{Logical, default \code{TRUE}. If \code{TRUE}, attempts to parse the JSON and
return a tibble/data frame when feasible; otherwise returns the parsed R object (list).
If \code{FALSE}, returns the raw response text (JSON string).}
}
\value{
If \code{parse = TRUE}:
\itemize{
\item A tibble/data frame when a tabular node is detected; otherwise a parsed list.
}
If \code{parse = FALSE}:
\itemize{
\item A character string with the raw JSON response.
}
}
\description{
Calls a single Madrid Open Data API endpoint under \code{https://datos.madrid.es/egob}
and optionally parses the JSON response. Supports simple path templating such as
\code{"/catalogo/tipo/evento/{id}.json"} via \code{path_params}.
}
\details{
The function performs a single \code{GET} request (no pagination). When \code{parse = TRUE},
it uses \code{jsonlite::fromJSON(..., simplifyVector = TRUE, flatten = TRUE)} and then applies
light heuristics:
\itemize{
\item If the top-level parsed object is a data frame, it is returned as a tibble.
\item Otherwise, it searches the first top-level field that is a data frame and returns that.
\item If no tabular node is found, the full parsed object (list) is returned.
}
This keeps simple “array-of-objects” responses convenient, while still exposing complex
nested structures when necessary.
}
\examples{
\dontrun{
# Path templating: fill {id}
fetch_api(
  path = "/catalogo/tipo/evento/{id}.json",
  path_params = list(id = 203)
)

# With query parameters (e.g., search agenda)
fetch_api(
  path = "/catalogo/agenda.json",
  query = list(q = "museo", limite = 50)
)

# Get raw JSON text
fetch_api(
  path = "/catalogo/agenda.json",
  query = list(q = "teatro"),
  parse = FALSE
)
}

}
\seealso{
\code{\link[httr]{GET}}, \code{\link[jsonlite]{fromJSON}}
}
